// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"github.com/cilium/cilium-cli/k8s"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type FakeRESTMapper struct {
	RESTMappingStub        func(schema.GroupKind, ...string) (*meta.RESTMapping, error)
	rESTMappingMutex       sync.RWMutex
	rESTMappingArgsForCall []struct {
		arg1 schema.GroupKind
		arg2 []string
	}
	rESTMappingReturns struct {
		result1 *meta.RESTMapping
		result2 error
	}
	rESTMappingReturnsOnCall map[int]struct {
		result1 *meta.RESTMapping
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRESTMapper) RESTMapping(arg1 schema.GroupKind, arg2 ...string) (*meta.RESTMapping, error) {
	fake.rESTMappingMutex.Lock()
	ret, specificReturn := fake.rESTMappingReturnsOnCall[len(fake.rESTMappingArgsForCall)]
	fake.rESTMappingArgsForCall = append(fake.rESTMappingArgsForCall, struct {
		arg1 schema.GroupKind
		arg2 []string
	}{arg1, arg2})
	stub := fake.RESTMappingStub
	fakeReturns := fake.rESTMappingReturns
	fake.recordInvocation("RESTMapping", []interface{}{arg1, arg2})
	fake.rESTMappingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRESTMapper) RESTMappingCallCount() int {
	fake.rESTMappingMutex.RLock()
	defer fake.rESTMappingMutex.RUnlock()
	return len(fake.rESTMappingArgsForCall)
}

func (fake *FakeRESTMapper) RESTMappingCalls(stub func(schema.GroupKind, ...string) (*meta.RESTMapping, error)) {
	fake.rESTMappingMutex.Lock()
	defer fake.rESTMappingMutex.Unlock()
	fake.RESTMappingStub = stub
}

func (fake *FakeRESTMapper) RESTMappingArgsForCall(i int) (schema.GroupKind, []string) {
	fake.rESTMappingMutex.RLock()
	defer fake.rESTMappingMutex.RUnlock()
	argsForCall := fake.rESTMappingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRESTMapper) RESTMappingReturns(result1 *meta.RESTMapping, result2 error) {
	fake.rESTMappingMutex.Lock()
	defer fake.rESTMappingMutex.Unlock()
	fake.RESTMappingStub = nil
	fake.rESTMappingReturns = struct {
		result1 *meta.RESTMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTMapper) RESTMappingReturnsOnCall(i int, result1 *meta.RESTMapping, result2 error) {
	fake.rESTMappingMutex.Lock()
	defer fake.rESTMappingMutex.Unlock()
	fake.RESTMappingStub = nil
	if fake.rESTMappingReturnsOnCall == nil {
		fake.rESTMappingReturnsOnCall = make(map[int]struct {
			result1 *meta.RESTMapping
			result2 error
		})
	}
	fake.rESTMappingReturnsOnCall[i] = struct {
		result1 *meta.RESTMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTMapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rESTMappingMutex.RLock()
	defer fake.rESTMappingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRESTMapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.RESTMapper = new(FakeRESTMapper)
