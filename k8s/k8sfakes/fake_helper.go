// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"github.com/cilium/cilium-cli/k8s"
	"k8s.io/apimachinery/pkg/runtime"
)

type FakeHelper struct {
	CreateStub        func(string, bool, runtime.Object) (runtime.Object, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 runtime.Object
	}
	createReturns struct {
		result1 runtime.Object
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 runtime.Object
		result2 error
	}
	DeleteStub        func(string, string) (runtime.Object, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteReturns struct {
		result1 runtime.Object
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 runtime.Object
		result2 error
	}
	NamespaceScopedStub        func() bool
	namespaceScopedMutex       sync.RWMutex
	namespaceScopedArgsForCall []struct {
	}
	namespaceScopedReturns struct {
		result1 bool
	}
	namespaceScopedReturnsOnCall map[int]struct {
		result1 bool
	}
	ReplaceStub        func(string, string, bool, runtime.Object) (runtime.Object, error)
	replaceMutex       sync.RWMutex
	replaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 runtime.Object
	}
	replaceReturns struct {
		result1 runtime.Object
		result2 error
	}
	replaceReturnsOnCall map[int]struct {
		result1 runtime.Object
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHelper) Create(arg1 string, arg2 bool, arg3 runtime.Object) (runtime.Object, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 runtime.Object
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHelper) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeHelper) CreateCalls(stub func(string, bool, runtime.Object) (runtime.Object, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeHelper) CreateArgsForCall(i int) (string, bool, runtime.Object) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHelper) CreateReturns(result1 runtime.Object, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 runtime.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeHelper) CreateReturnsOnCall(i int, result1 runtime.Object, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 runtime.Object
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 runtime.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeHelper) Delete(arg1 string, arg2 string) (runtime.Object, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHelper) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeHelper) DeleteCalls(stub func(string, string) (runtime.Object, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeHelper) DeleteArgsForCall(i int) (string, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHelper) DeleteReturns(result1 runtime.Object, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 runtime.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeHelper) DeleteReturnsOnCall(i int, result1 runtime.Object, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 runtime.Object
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 runtime.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeHelper) NamespaceScoped() bool {
	fake.namespaceScopedMutex.Lock()
	ret, specificReturn := fake.namespaceScopedReturnsOnCall[len(fake.namespaceScopedArgsForCall)]
	fake.namespaceScopedArgsForCall = append(fake.namespaceScopedArgsForCall, struct {
	}{})
	stub := fake.NamespaceScopedStub
	fakeReturns := fake.namespaceScopedReturns
	fake.recordInvocation("NamespaceScoped", []interface{}{})
	fake.namespaceScopedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHelper) NamespaceScopedCallCount() int {
	fake.namespaceScopedMutex.RLock()
	defer fake.namespaceScopedMutex.RUnlock()
	return len(fake.namespaceScopedArgsForCall)
}

func (fake *FakeHelper) NamespaceScopedCalls(stub func() bool) {
	fake.namespaceScopedMutex.Lock()
	defer fake.namespaceScopedMutex.Unlock()
	fake.NamespaceScopedStub = stub
}

func (fake *FakeHelper) NamespaceScopedReturns(result1 bool) {
	fake.namespaceScopedMutex.Lock()
	defer fake.namespaceScopedMutex.Unlock()
	fake.NamespaceScopedStub = nil
	fake.namespaceScopedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHelper) NamespaceScopedReturnsOnCall(i int, result1 bool) {
	fake.namespaceScopedMutex.Lock()
	defer fake.namespaceScopedMutex.Unlock()
	fake.NamespaceScopedStub = nil
	if fake.namespaceScopedReturnsOnCall == nil {
		fake.namespaceScopedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.namespaceScopedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHelper) Replace(arg1 string, arg2 string, arg3 bool, arg4 runtime.Object) (runtime.Object, error) {
	fake.replaceMutex.Lock()
	ret, specificReturn := fake.replaceReturnsOnCall[len(fake.replaceArgsForCall)]
	fake.replaceArgsForCall = append(fake.replaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 runtime.Object
	}{arg1, arg2, arg3, arg4})
	stub := fake.ReplaceStub
	fakeReturns := fake.replaceReturns
	fake.recordInvocation("Replace", []interface{}{arg1, arg2, arg3, arg4})
	fake.replaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHelper) ReplaceCallCount() int {
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	return len(fake.replaceArgsForCall)
}

func (fake *FakeHelper) ReplaceCalls(stub func(string, string, bool, runtime.Object) (runtime.Object, error)) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = stub
}

func (fake *FakeHelper) ReplaceArgsForCall(i int) (string, string, bool, runtime.Object) {
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	argsForCall := fake.replaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHelper) ReplaceReturns(result1 runtime.Object, result2 error) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = nil
	fake.replaceReturns = struct {
		result1 runtime.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeHelper) ReplaceReturnsOnCall(i int, result1 runtime.Object, result2 error) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = nil
	if fake.replaceReturnsOnCall == nil {
		fake.replaceReturnsOnCall = make(map[int]struct {
			result1 runtime.Object
			result2 error
		})
	}
	fake.replaceReturnsOnCall[i] = struct {
		result1 runtime.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.namespaceScopedMutex.RLock()
	defer fake.namespaceScopedMutex.RUnlock()
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.Helper = new(FakeHelper)
